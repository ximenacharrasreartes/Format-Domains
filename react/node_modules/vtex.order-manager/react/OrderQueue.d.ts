import type { FC, ReactNode } from 'react';
import React from 'react';
import type { OrderForm } from 'vtex.checkout-graphql';
import { QueueStatus } from './constants';
import type { CancellablePromiseLike } from './modules/SequentialTaskQueue';
declare type ListenFunction = (event: QueueStatus, callback: () => void) => () => void;
interface Context {
    enqueue: (task: () => Promise<OrderForm>, id?: string) => CancellablePromiseLike<OrderForm>;
    listen: ListenFunction;
    isWaiting: (id: string) => boolean;
}
interface OrderQueueProviderProps {
    children: ReactNode;
}
export declare const useQueueStatus: (listen: ListenFunction) => React.MutableRefObject<QueueStatus>;
export declare const OrderQueueProvider: FC<OrderQueueProviderProps>;
export declare const useOrderQueue: () => Context;
declare const _default: {
    OrderQueueProvider: FC<OrderQueueProviderProps>;
    QueueStatus: typeof QueueStatus;
    useOrderQueue: () => Context;
    useQueueStatus: (listen: ListenFunction) => React.MutableRefObject<QueueStatus>;
};
export default _default;
