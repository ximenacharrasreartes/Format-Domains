export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Markdown: any;
  Upload: any;
  IOSanitizedString: any;
  IOUpload: any;
};














export type BlockInput = {
  propsJSON: Scalars['String'];
  blocks: Array<Maybe<BlockInsertionInput>>;
  after: Array<Maybe<Scalars['String']>>;
  around: Array<Maybe<Scalars['String']>>;
  before: Array<Maybe<Scalars['String']>>;
};


export type BlockInsertionInput = {
  blockId?: Maybe<Scalars['String']>;
  extensionPointId?: Maybe<Scalars['String']>;
};

export type BlockPathItem = {
  role?: Maybe<BlockPathItemRole>;
  id?: Maybe<Scalars['String']>;
};

export type BlockPathItemRole = 
  | 'TEMPLATE'
  | 'BLOCK'
  | 'AFTER'
  | 'AROUND'
  | 'BEFORE';






export type ConditionInput = {
  id?: Maybe<Scalars['String']>;
  pageContext?: Maybe<PageContextInput>;
  allMatches?: Maybe<Scalars['Boolean']>;
  statements?: Maybe<Array<Maybe<ConditionStatementInput>>>;
};


export type ConditionStatementInput = {
  subject?: Maybe<Scalars['String']>;
  verb?: Maybe<Scalars['String']>;
  objectJSON?: Maybe<Scalars['String']>;
};


export type ContentConfigurationInput = {
  allowMerge?: Maybe<Scalars['Boolean']>;
  condition?: Maybe<ConditionInput>;
  contentId?: Maybe<Scalars['String']>;
  contentJSON?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  origin?: Maybe<Scalars['String']>;
};












export type InterfacePathItem = {
  id?: Maybe<Scalars['String']>;
  role?: Maybe<BlockPathItemRole>;
  index?: Maybe<Scalars['Int']>;
};

export type IoCacheControlScope = 
  | 'SEGMENT'
  | 'PUBLIC'
  | 'PRIVATE';









export type NewRouteInput = {
  uuid?: Maybe<Scalars['String']>;
  auth?: Maybe<Scalars['Boolean']>;
  blockId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  interfaceId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  pages?: Maybe<Array<Maybe<PageInput>>>;
  title?: Maybe<Scalars['String']>;
  metaTags?: Maybe<RouteMetaTagsInput>;
  bindingId?: Maybe<Scalars['String']>;
  dataSource?: Maybe<Scalars['String']>;
};

export type PageBlocksInput = {
  pathId?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PageContentInput = {
  extensions?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  routeContextLocator?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  depTree?: Maybe<Scalars['String']>;
  resolvedContentType?: Maybe<ResolvedContentType>;
};



export type PageContextInput = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type PageInput = {
  pageId?: Maybe<Scalars['String']>;
  condition?: Maybe<ConditionInput>;
  template?: Maybe<Scalars['String']>;
};


export type PrefecthBlocksInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PreviewRouteInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
};






export type ResolvedContentType = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type RouteMetaTagsInput = {
  description?: Maybe<Scalars['String']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
};






export type UserDevice = 
  | 'desktop'
  | 'phone'
  | 'tablet'
  | 'unknown';

export type ListContentQueryVariables = Exact<{
  bindingId?: Maybe<Scalars['String']>;
  blockId?: Maybe<Scalars['String']>;
  pageContext?: Maybe<PageContextInput>;
  template?: Maybe<Scalars['String']>;
  treePath?: Maybe<Scalars['String']>;
}>;


export type ListContentQuery = { __typename?: 'Query', listContent?: Maybe<Array<Maybe<{ __typename?: 'ContentConfiguration', contentJSON?: Maybe<string> }>>> };

export type NavigationPageQueryVariables = Exact<{
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
}>;


export type NavigationPageQuery = { __typename?: 'Query', navigationPage?: Maybe<{ __typename?: 'RenderableRoute', appsEtag?: Maybe<string>, appsSettingsJSON?: Maybe<string>, blocksJSON?: Maybe<string>, blocksTreeJSON?: Maybe<string>, contentMapJSON?: Maybe<string>, cacheHintsJSON?: Maybe<string>, componentsJSON?: Maybe<string>, extensionsJSON?: Maybe<string>, pagesJSON?: Maybe<string>, messages?: Maybe<Array<Maybe<{ __typename?: 'UIMessage', key?: Maybe<string>, message?: Maybe<string> }>>>, page?: Maybe<{ __typename?: 'MatchingPage', blockId?: Maybe<string>, canonicalPath?: Maybe<string>, title?: Maybe<string>, routeId?: Maybe<string>, metaTags?: Maybe<{ __typename?: 'DomainRouteMetaTags', description?: Maybe<string>, keywords?: Maybe<Array<Maybe<string>>> }>, pageContext?: Maybe<{ __typename?: 'PageContext', id?: Maybe<string>, type?: Maybe<string> }> }> }> };

export type RouteDataQueryVariables = Exact<{
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
  renderMajor?: Maybe<Scalars['Int']>;
}>;


export type RouteDataQuery = { __typename?: 'Query', prefetchBlocks?: Maybe<{ __typename?: 'PrefecthBlocksResponse', extensionsJSON?: Maybe<string>, componentsJSON?: Maybe<string>, messages?: Maybe<Array<Maybe<{ __typename?: 'UIMessage', key?: Maybe<string>, message?: Maybe<string> }>>> }> };

export type RoutePreviewsQueryVariables = Exact<{
  routes?: Maybe<Array<Maybe<PreviewRouteInput>> | Maybe<PreviewRouteInput>>;
  renderMajor?: Maybe<Scalars['Int']>;
}>;


export type RoutePreviewsQuery = { __typename?: 'Query', defaultPages?: Maybe<{ __typename?: 'PartialRenderableRoute', componentsJSON?: Maybe<string> }> };

export {}