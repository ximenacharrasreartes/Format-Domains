export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Markdown: any;
  CustomFields: any;
  ProductCategories: any;
  AttachmentContent: any;
  ConnectorAdditionalData: any;
  JSONSchema: any;
  Upload: any;
  InputValues: any;
  DocumentV2: any;
  IOSanitizedString: any;
  IOUpload: any;
};














export type AddressInput = {
  receiverName?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  postalCode?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  addressName?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
};





export type AssemblyOptionInput = {
  assemblyId: Scalars['String'];
  id?: Maybe<Scalars['ID']>;
  quantity?: Maybe<Scalars['Int']>;
  seller?: Maybe<Scalars['String']>;
  inputValues?: Maybe<Scalars['InputValues']>;
  options?: Maybe<Array<AssemblyOptionInput>>;
};






export type Behavior = 
  | 'USER_ONLY'
  | 'USER_AND_APP'
  | 'FULL';



export type BlockInput = {
  propsJSON: Scalars['String'];
  blocks: Array<Maybe<BlockInsertionInput>>;
  after: Array<Maybe<Scalars['String']>>;
  around: Array<Maybe<Scalars['String']>>;
  before: Array<Maybe<Scalars['String']>>;
};


export type BlockInsertionInput = {
  blockId?: Maybe<Scalars['String']>;
  extensionPointId?: Maybe<Scalars['String']>;
};

export type BlockPathItem = {
  role?: Maybe<BlockPathItemRole>;
  id?: Maybe<Scalars['String']>;
};

export type BlockPathItemRole = 
  | 'TEMPLATE'
  | 'BLOCK'
  | 'AFTER'
  | 'AROUND'
  | 'BEFORE';
















export type ConditionInput = {
  id?: Maybe<Scalars['String']>;
  pageContext?: Maybe<PageContextInput>;
  allMatches?: Maybe<Scalars['Boolean']>;
  statements?: Maybe<Array<Maybe<ConditionStatementInput>>>;
};


export type ConditionStatementInput = {
  subject?: Maybe<Scalars['String']>;
  verb?: Maybe<Scalars['String']>;
  objectJSON?: Maybe<Scalars['String']>;
};



export type ContentConfigurationInput = {
  allowMerge?: Maybe<Scalars['Boolean']>;
  condition?: Maybe<ConditionInput>;
  contentId?: Maybe<Scalars['String']>;
  contentJSON?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  origin?: Maybe<Scalars['String']>;
};




export type CrossSelingInputEnum = 
  | 'buy'
  | 'similars'
  | 'view'
  | 'viewAndBought'
  | 'accessories'
  | 'suggestions';












export type DeviceType = 
  | 'MOBILE'
  | 'TABLET'
  | 'DESKTOP';





export type DocumentInput = {
  fields?: Maybe<Array<Maybe<FieldInput>>>;
};

export type DocumentInputV2 = {
  document?: Maybe<Scalars['DocumentV2']>;
};










export type Encoding = 
  | 'ICU'
  | 'HANDLEBARS';




export type FieldInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};





export type IndexedMessages = {
  from: Scalars['String'];
  messages: Array<MessageInputV2>;
};



export type InstallmentsCriteria = 
  | 'MAX'
  | 'MIN'
  | 'ALL';

export type InterfacePathItem = {
  id?: Maybe<Scalars['String']>;
  role?: Maybe<BlockPathItemRole>;
  index?: Maybe<Scalars['Int']>;
};

export type IoCacheControlScope = 
  | 'SEGMENT'
  | 'PUBLIC'
  | 'PRIVATE';




export type ItemInput = {
  itemId?: Maybe<Scalars['ID']>;
  sellers?: Maybe<Array<Maybe<SellerInput>>>;
};









export type ListArgsV2 = {
  range: MessagesRange;
};

export type ListInput = {
  /**  The list's name  */
  name: Scalars['String'];
  /**  Flag that indicates if the list is public or not  */
  isPublic?: Maybe<Scalars['Boolean']>;
  /**  Flag that indicates if the list is editable or not  */
  isEditable?: Maybe<Scalars['Boolean']>;
  /**  List's owner  */
  owner?: Maybe<Scalars['String']>;
  /**  List items  */
  items?: Maybe<Array<Maybe<ListItemInput>>>;
};


export type ListItemInput = {
  /**  List item id  */
  id?: Maybe<Scalars['ID']>;
  /**  Product id  */
  productId: Scalars['ID'];
  /**  Sku id  */
  skuId: Scalars['ID'];
  /**  The quantity of the item  */
  quantity?: Maybe<Scalars['Int']>;
};











export type MessageInputV2 = {
  content: Scalars['String'];
  context?: Maybe<Scalars['String']>;
  behavior?: Maybe<Behavior>;
};


export type MessageSaveInputV2 = {
  srcLang: Scalars['String'];
  srcMessage: Scalars['String'];
  targetMessage: Scalars['String'];
  groupContext?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
};


export type MessagesRange = {
  from: Scalars['Int'];
  to: Scalars['Int'];
};





export type NewRouteInput = {
  uuid?: Maybe<Scalars['String']>;
  auth?: Maybe<Scalars['Boolean']>;
  blockId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  interfaceId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  pages?: Maybe<Array<Maybe<PageInput>>>;
  title?: Maybe<Scalars['String']>;
  metaTags?: Maybe<RouteMetaTagsInput>;
  bindingId?: Maybe<Scalars['String']>;
  dataSource?: Maybe<Scalars['String']>;
};

export type NewsletterFieldsInput = {
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  bindingId?: Maybe<Scalars['String']>;
  bindingUrl?: Maybe<Scalars['String']>;
};





export type OrderFormAddressInput = {
  addressId?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type OrderFormCheckinInput = {
  isCheckedIn?: Maybe<Scalars['Boolean']>;
  pickupPointId?: Maybe<Scalars['String']>;
};

export type OrderFormInputUtmiParams = {
  campaign?: Maybe<Scalars['String']>;
  part?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['String']>;
};

export type OrderFormInputUtmParams = {
  campaign?: Maybe<Scalars['String']>;
  medium?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};


export type OrderFormItemInput = {
  id?: Maybe<Scalars['Int']>;
  index?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  seller?: Maybe<Scalars['ID']>;
  inputValues?: Maybe<Scalars['InputValues']>;
  options?: Maybe<Array<Maybe<AssemblyOptionInput>>>;
};

export type OrderFormPaymentInput = {
  paymentSystem?: Maybe<Scalars['Int']>;
  referenceValue?: Maybe<Scalars['Float']>;
  bin?: Maybe<Scalars['Int']>;
  tokenId?: Maybe<Scalars['String']>;
};

export type OrderFormPaymentTokenInput = {
  tokenId?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  bin?: Maybe<Scalars['String']>;
  paymentSystem?: Maybe<Scalars['String']>;
  paymentSystemName?: Maybe<Scalars['String']>;
};

export type OrderFormProfileInput = {
  email?: Maybe<Scalars['String']>;
  isCorporate?: Maybe<Scalars['Boolean']>;
  corporateDocument?: Maybe<Scalars['String']>;
  corporateName?: Maybe<Scalars['String']>;
  corporatePhone?: Maybe<Scalars['String']>;
  document?: Maybe<Scalars['String']>;
  documentType?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stateInscription?: Maybe<Scalars['String']>;
  tradeName?: Maybe<Scalars['String']>;
};














export type PageBlocksInput = {
  pathId?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PageContentInput = {
  extensions?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  routeId?: Maybe<Scalars['String']>;
  routeContextLocator?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  depTree?: Maybe<Scalars['String']>;
  resolvedContentType?: Maybe<ResolvedContentType>;
};



export type PageContextInput = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type PageEntityIdentifier = 
  | 'brand'
  | 'department'
  | 'category'
  | 'subcategory'
  | 'search';

export type PageInput = {
  pageId?: Maybe<Scalars['String']>;
  condition?: Maybe<ConditionInput>;
  template?: Maybe<Scalars['String']>;
};



export type PaymentAddress = {
  postalCode?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
};

export type PaymentInput = {
  paymentSystem?: Maybe<Scalars['String']>;
  cardHolder?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Scalars['String']>;
  csc?: Maybe<Scalars['String']>;
  document?: Maybe<Scalars['String']>;
  documentType?: Maybe<Scalars['String']>;
  partnerId?: Maybe<Scalars['String']>;
  address?: Maybe<PaymentAddress>;
};








export type PlaceholderInput = {
  name?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['String']>;
};

export type PrefecthBlocksInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
  renderMajor?: Maybe<Scalars['Int']>;
  query?: Maybe<Scalars['String']>;
  depTree?: Maybe<Scalars['String']>;
  device?: Maybe<UserDevice>;
};


export type PreviewRouteInput = {
  routeId?: Maybe<Scalars['String']>;
  declarer?: Maybe<Scalars['String']>;
};









export type ProductUniqueIdentifier = {
  field: ProductUniqueIdentifierField;
  value: Scalars['ID'];
};

export type ProductUniqueIdentifierField = 
  | 'id'
  | 'slug'
  | 'ean'
  | 'reference'
  | 'sku';



export type ProfileCustomFieldInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type ProfileInput = {
  /** User's email */
  email: Scalars['String'];
  /** User's first name */
  firstName?: Maybe<Scalars['String']>;
  /** User's last name */
  lastName?: Maybe<Scalars['String']>;
  /** Document identification. E.g. CPF, SSN, Driver License */
  document?: Maybe<Scalars['String']>;
  /** DEPRECATED */
  phone?: Maybe<Scalars['String']>;
  /** User's birth date */
  birthDate?: Maybe<Scalars['String']>;
  /** User's gender (plain unvalidated string) */
  gender?: Maybe<Scalars['String']>;
  /** User' personal phone */
  homePhone?: Maybe<Scalars['String']>;
  /** User's business phone */
  businessPhone?: Maybe<Scalars['String']>;
  /** DEPRECATED */
  tradeName?: Maybe<Scalars['String']>;
  /** User's company corporate name */
  corporateName?: Maybe<Scalars['String']>;
  /** User's company corporate document (e.g. CNPJ) */
  corporateDocument?: Maybe<Scalars['String']>;
  /** User's company state registration */
  stateRegistration?: Maybe<Scalars['String']>;
  /** Whether the user is a corporation or not */
  isCorporate?: Maybe<Scalars['Boolean']>;
};













export type ResolvedContentType = {
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type RouteMetaTagsInput = {
  description?: Maybe<Scalars['String']>;
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SaveArgsV2 = {
  to: Scalars['String'];
  messages: Array<MessageSaveInputV2>;
  fireEvent?: Maybe<Scalars['Boolean']>;
};






export type SellerInput = {
  sellerId?: Maybe<Scalars['ID']>;
};





export type ShippingItem = {
  id?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
};














export type TranslateArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree?: Maybe<Scalars['String']>;
  encoding?: Maybe<Encoding>;
};

export type TranslateWithDependenciesArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree: Scalars['String'];
  encoding?: Maybe<Encoding>;
};





export type UserConditionType = 
  | 'authorized'
  | 'unauthorized'
  | 'forbidden';

export type UserDevice = 
  | 'desktop'
  | 'phone'
  | 'tablet'
  | 'unknown';





export type CategoryQueryVariables = Exact<{
  id?: Maybe<Scalars['Int']>;
}>;


export type CategoryQuery = { __typename?: 'Query', category?: Maybe<{ __typename?: 'Category', cacheId?: Maybe<string>, id?: Maybe<number>, href?: Maybe<string>, name?: Maybe<string>, titleTag?: Maybe<string> }> };

export type CategoryWithChildrenQueryVariables = Exact<{
  id?: Maybe<Scalars['Int']>;
}>;


export type CategoryWithChildrenQuery = { __typename?: 'Query', category?: Maybe<{ __typename?: 'Category', cacheId?: Maybe<string>, id?: Maybe<number>, href?: Maybe<string>, name?: Maybe<string>, titleTag?: Maybe<string>, children?: Maybe<Array<Maybe<{ __typename?: 'Category', id?: Maybe<number>, href?: Maybe<string>, name?: Maybe<string>, titleTag?: Maybe<string> }>>> }> };

export {}